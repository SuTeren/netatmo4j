plugins {
	id 'java-library'
	id 'groovy'
	id 'maven-publish'
	id 'signing'
	id 'io.freefair.lombok' version '8.4'
}


repositories {
	mavenCentral()
}

dependencies {
	api 'com.fasterxml.jackson.core:jackson-databind:2.15.1'
	api 'org.slf4j:slf4j-api:2.0.7'

	implementation 'org.slf4j:slf4j-simple:2.0.7'
	implementation 'org.apache.commons:commons-text:1.10.0'
	implementation 'org.apache.commons:commons-io:1.3.2'
	implementation 'org.apache.commons:commons-collections4:4.4'
	implementation 'info.picocli:picocli:4.7.3'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1'
	implementation 'org.apache.ivy:ivy:2.5.1'
	implementation 'org.apache.groovy:groovy:4.0.14'
	implementation 'org.apache.groovy:groovy-json:4.0.14'
	implementation 'org.apache.groovy:groovy-yaml:4.0.14'
	implementation 'info.picocli:picocli-groovy:4.7.3'

	annotationProcessor 'info.picocli:picocli-codegen:4.7.5'

	testImplementation platform('org.junit:junit-bom:5.9.1')
	testImplementation 'org.junit.jupiter:junit-jupiter'
	implementation 'net.sourceforge.plantuml:plantuml:1.2023.10'
}

compileJava {
	options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

tasks.register('javadocJar', Jar) {
	archiveClassifier = 'javadoc'
	from javadoc
}

tasks.register('sourcesJar', Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

tasks.register('fatJar', Jar) {
	manifest {
		attributes 'Main-Class': 'net.suteren.netatmo.cli.NetatmoCli'
	}
	archiveClassifier = 'fatjar'
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
	doLast {
		outputs.files.each { it.setExecutable(true) }
	}
}


artifacts {
	archives javadocJar, sourcesJar, fatJar
}

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/konikvranik/netatmo4j")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
				password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
			}
		}
		maven {
			name = "OSSRHPackages"
			url = uri(version.endsWith('SNAPSHOT')
					? "https://s01.oss.sonatype.org/content/repositories/snapshots/"
					: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")

			credentials {
				username = project.findProperty("ossrh.username")
				password = project.findProperty("ossrh.password")
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			from(components.java)
			pom {
				name = 'netatmo4j'
				// optionally artifactId can be defined here
				description = 'Library to call Netatmo API.'
				url = 'https://github.com/konikvranik/netatmo4j'

				scm {
					connection = 'scm:git:git@github.com:konikvranik/netatmo4j.git'
					url = 'https://github.com/konikvranik/netatmo4j.git'
				}

				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id = 'konikvranik'
						name = 'Petr Vran√≠k'
						email = 'petr@vranik.name'
					}
				}
			}
		}
	}
}

signing {
	useInMemoryPgpKeys(findProperty('signing.key'), findProperty('signing.password'))
	sign publishing.publications.mavenJava
}
